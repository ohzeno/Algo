# https://www.acmicpc.net/problem/13172
import sys

sys.stdin = open("input.txt")


def input():
    return sys.stdin.readline().rstrip()


"""
분수는 모듈러 연산으로 나타내고,
두 분수의 덧셈, 뺄셈, 곱셈은 mod X에서 두 정수를 가지고 계산하고
나눗셈은 나누는 분수의 곱셈에 대한 역원을 구한 후 그 역원을 mod X에서 곱하는 것으로 처리한다면,
분수를 정확히 출력하기 위해 통분을 하거나 기약분수로 만드는 골치아픈 일을 할 필요가 없다.
M개의 주사위가 있고, i번째 주사위가 N_i면체 주사위이며, 
모든 면에 적힌 숫자를 더한 값이 S_i일 때, 
각 주사위에 대해 주사위를 던졌을 때 주사위의 각 면이 나올 확률이 동일하다면,
모든 주사위를 한 번씩 던졌을 때 나온 숫자들의 합의 기댓값을 구하는 문제를 해결하라.

첫 번째 줄에는 주사위의 수를 나타내는 정수 M(1 ≤ M ≤ 10^4)이 주어진다.

다음 M개의 줄은 각 주사위의 정보를 나타내며, 
이 중 i(1 ≤ i ≤ M)번째 줄에는 Ni, Si(1 ≤ Ni, Si ≤ 10^9)가 공백으로 구분되어 주어진다.

모든 주사위를 한 번씩 던졌을 때 나온 숫자들의 합의 기댓값을 출력한다. 
확한 판별을 위해, 답을 기약분수로 나타내었을 때 a/b가 된다면, 
(a × b^(-1)) mod 1,000,000,007을 대신 출력하도록 한다. 
b^(-1)은 b의 모듈러 곱셈에 대한 역원이다. 
이 문제에서는 가능한 모든 입력에 대해 답이 존재한다.
"""


def get_exp(n, s):  # n이 분모이므로 역원 구해서 곱해줌
    return s * get_inv(n) % X


def get_inv(n):  # 문제에 나온 역원 구하는 방법
    return pow(n, X-2, X)


X = int(1e9) + 7
m = int(input())
exp = 0
for _ in range(m):
    n, s = map(int, input().split())  # s가 분자
    exp += get_exp(n, s)
    exp %= X
print(exp)


"""
현 시점 골드 4. 제출 6513. 정답률 45.732 %
구현은 금방 하는데 문제 이해가 오래걸렸다.
물리학, 전기공학, 고분자 공학을 배웠지만 모듈러 연산이란걸 본 적이 없어서 
모듈러 연산이 이렇게 이상한 것인 줄 몰랐다.
'모듈러 상에서 가지고 있다'같은 알아들을 수 없는 말도 문맥을 보고 유추해야 했고
항등원과 역원에 대해서도 일반 연산자와 전혀 다른 식으로 작동하고, 
모듈러 연산 표기법도 이해하기 힘들었다.
문제에선 그런 내용들을 사전 지식으로 가정하고 있었기 때문에
문제의 명제 사이의 로직이 어떻게 이어지는건지 이해하기 힘들었다.
드러운 모듈러 연산...
"""

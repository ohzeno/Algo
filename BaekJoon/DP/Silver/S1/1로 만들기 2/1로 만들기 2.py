# https://www.acmicpc.net/problem/12852
import sys
sys.stdin = open('input.txt')
def input():
    return sys.stdin.readline().rstrip()

"""
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.
- X가 3으로 나누어 떨어지면, 3으로 나눈다.
- X가 2로 나누어 떨어지면, 2로 나눈다.
- 1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 
연산을 사용하는 횟수의 최솟값을 출력하시오.
둘째 줄에는 N을 1로 만드는 방법에 포함되어 있는 수를 공백으로 구분해서 순서대로 출력한다. 
정답이 여러 가지인 경우에는 아무거나 출력한다.
"""

n = int(input())
dp = [[0, []] for _ in range(n + 1)]  # [최소 연산, [경로]]
dp[1][1] = [1]  # 경로 기록.
for i in range(2, n + 1):  # 2부터
    dp[i][0] = dp[i - 1][0] + 1  # 1을 빼는 경우
    dp[i][1] = dp[i - 1][1] + [i]  # 이전 경로와 마이너스 전의 현재 수.
    if i % 3 == 0 and dp[i // 3][0] + 1 < dp[i][0]:
        # 3으로 나누어 떨어지고, 3으로 나눈 경우가 1을 빼는 경우보다 연산이 적은 경우
        dp[i][0] = dp[i // 3][0] + 1  # 연산 횟수 갱신
        dp[i][1] = dp[i // 3][1] + [i]  # 경로 갱신
    if i % 2 == 0 and dp[i // 2][0] + 1 < dp[i][0]:
        dp[i][0] = dp[i // 2][0] + 1
        dp[i][1] = dp[i // 2][1] + [i]
print(dp[n][0])
print(*dp[n][1][::-1])  # 경로는 역순으로.

"""
현 시점 실버1. 제출 20578, 정답률 47.278%
1로 만들기의 변형. bfs가 더 편할 것 같긴 한데 시간제한이 0.5초라 될지는 모르겠다.
기존 1차원 dp의 각 원소에 경로 기록을 더해줬다.
"""

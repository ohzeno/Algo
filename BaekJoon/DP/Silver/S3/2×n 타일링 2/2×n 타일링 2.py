# https://www.acmicpc.net/problem/11727
import sys
sys.stdin = open('input.txt')
def input():
    return sys.stdin.readline().rstrip()
"""
2xn 직사각형을 1x2, 2x1, 2x2 타일로 채우는 방법의 수를 10,007로 나눈 나머지를 출력하라.
"""

n = int(input())
dp = [0] * (n+1)
dp[1] = 1
if n > 1:
    dp[2] = 3
    for i in range(3, n+1):
        dp[i] = dp[i-1] + 2*dp[i-2]
print(dp[n] % 10007)


"""
현 시점 실버 3. 제출 70939. 정답률 58.862 %
2xn타일링 문제의 변형.
실버3이고 정답률이 높은건 당연히 블로그 풀이들을 긁어와서 그런 것이다.
iq테스트나 인적성에서 저런 문제가 나왔다면 정답률이 높지 않았을 것이다.

가로 n칸을 생각할 때, 이전 조합으로 유도해야 한다. 
n-2에 ||, =, ㅁ를 붙일 수 있는데
각각 왼쪽, 오른쪽에 붙을 수 있고, 그 과정에 중복이 생길 수 있다.
하지만 왼쪽에 붙는 경우는 n-2에서 이미 고려되었기에 오른쪽만 생각하면 된다.
그것만으로는 해결이 되지 않는데, n-2의 양쪽에 |를 붙일 수 있기 때문이다.
이 역시 왼쪽의 경우는 n-1에서 이미 고려되었다. 
오른쪽에 |를 붙이는 경우는 n-1을 생각하면 된다.
그리고 n-1의 오른쪽에 |를 붙이는 경우의 수에는 n-2에 ||를 붙이는 경우가 포함된다.
그래서 n-2에는 =, ㅁ만 붙일 수 있다.
결론적으로 dp[n] = dp[n-1] + 2*dp[n-2]가 된다.
"""